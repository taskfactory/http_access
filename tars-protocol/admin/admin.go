// Package admin comment
// This file was generated by tars2go 1.1.10
// Generated from admin.tars
package admin

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// GetSourcesReq struct implement
type GetSourcesReq struct {
	Sname    string `json:"sname"`
	Page     int32  `json:"page"`
	PageSize int32  `json:"pageSize"`
}

func (st *GetSourcesReq) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *GetSourcesReq) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Sname, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Page, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.PageSize, 2, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *GetSourcesReq) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetSourcesReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *GetSourcesReq) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Sname, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Page, 1)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.PageSize, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *GetSourcesReq) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// Source struct implement
type Source struct {
	Id        int64  `json:"id"`
	Sid       uint16 `json:"sid"`
	Sname     string `json:"sname"`
	Desc      string `json:"desc"`
	Confver   uint16 `json:"confver"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

func (st *Source) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *Source) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt64(&st.Id, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadUint16(&st.Sid, 1, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Sname, 2, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Desc, 3, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadUint16(&st.Confver, 4, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.CreatedAt, 5, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.UpdatedAt, 6, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *Source) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Source, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *Source) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt64(st.Id, 0)
	if err != nil {
		return err
	}

	err = buf.WriteUint16(st.Sid, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Sname, 2)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Desc, 3)
	if err != nil {
		return err
	}

	err = buf.WriteUint16(st.Confver, 4)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.CreatedAt, 5)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.UpdatedAt, 6)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *Source) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// SourcePagination struct implement
type SourcePagination struct {
	Page     int32    `json:"page"`
	PageSize int32    `json:"pageSize"`
	Total    int32    `json:"total"`
	Sources  []Source `json:"sources"`
}

func (st *SourcePagination) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *SourcePagination) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt32(&st.Page, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.PageSize, 1, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Total, 2, true)
	if err != nil {
		return err
	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Sources = make([]Source, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.Sources[i0].ReadBlock(readBuf, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *SourcePagination) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require SourcePagination, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *SourcePagination) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt32(st.Page, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.PageSize, 1)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Total, 2)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Sources)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Sources {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *SourcePagination) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetSourcesRsp struct implement
type GetSourcesRsp struct {
	Code int32            `json:"code"`
	Msg  string           `json:"msg"`
	Data SourcePagination `json:"data"`
}

func (st *GetSourcesRsp) ResetDefault() {
	st.Data.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *GetSourcesRsp) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt32(&st.Code, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Msg, 1, true)
	if err != nil {
		return err
	}

	err = st.Data.ReadBlock(readBuf, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *GetSourcesRsp) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetSourcesRsp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *GetSourcesRsp) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt32(st.Code, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Msg, 1)
	if err != nil {
		return err
	}

	err = st.Data.WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *GetSourcesRsp) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// UpsertSourceReq struct implement
type UpsertSourceReq struct {
	Id    int64  `json:"id"`
	Sname string `json:"sname"`
	Desc  string `json:"desc"`
}

func (st *UpsertSourceReq) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *UpsertSourceReq) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt64(&st.Id, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Sname, 1, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Desc, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *UpsertSourceReq) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UpsertSourceReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *UpsertSourceReq) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt64(st.Id, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Sname, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Desc, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *UpsertSourceReq) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// UpsertSourceRsp struct implement
type UpsertSourceRsp struct {
	Code   int32  `json:"code"`
	Msg    string `json:"msg"`
	Source Source `json:"source"`
}

func (st *UpsertSourceRsp) ResetDefault() {
	st.Source.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *UpsertSourceRsp) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadInt32(&st.Code, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Msg, 1, true)
	if err != nil {
		return err
	}

	err = st.Source.ReadBlock(readBuf, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *UpsertSourceRsp) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UpsertSourceRsp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *UpsertSourceRsp) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteInt32(st.Code, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Msg, 1)
	if err != nil {
		return err
	}

	err = st.Source.WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *UpsertSourceRsp) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
